#! /usr/bin/env node

'use strict'

const [, , ...params] = process.argv
const string = params.join(' ') 
const stringNormalized = string.normalize('NFD').replace(/[\u0300-\u036f]/g, "")
const stringReplaced = stringNormalized.replace(/[`~!@#$%^&*()_|+\-=?;:'".<>\{\}\[\]\\\/]/gi, '')
const array = stringReplaced.split(',')

for (let city = 0; city < array.length; city++) {
  array[city] = array[city].trim()
  if (parseInt(array[city])) {
    array[city] = parseInt(array[city])
  }
}

const makeHttpRequest = (url) => {
  return new Promise((resolve) => {
    const http = require('http')

    http.get(url, (response) => {
      let data = ''

      response.on('data', (chunk) => {
        data += chunk
      })

      response.on('end', () => {
        resolve(data)
      })

    }).on("error", (error) => {
      console.log("Error: " + error.message)
    })
  })
}

const getWeatherData = (array) => {
  return new Promise((resolve) => {
    const weatherDataPromises = []

    for (let cityName = 0; cityName < array.length; cityName++) {
      let url = ''

      if (typeof array[cityName] === 'number') {
        url = `http://api.openweathermap.org/data/2.5/weather?q=${array[cityName]}&APPID=1a8ac7b8f66d5a48acf443e3fc063544`
      } else if (typeof array[cityName] === 'string') {
        url = `http://api.openweathermap.org/data/2.5/weather?q=${array[cityName]}&APPID=1a8ac7b8f66d5a48acf443e3fc063544`
      }

      weatherDataPromises.push(makeHttpRequest(url))
    }
    Promise.all(weatherDataPromises)
      .then(cityData => {
        for (let city = 0; city < cityData.length; city++) {
          cityData[city] = JSON.parse(cityData[city])
        }
        resolve(cityData)
      })
  })
}

const getTimeData = (array) => {
  return new Promise((resolve) => {
    const timeDataPromises = []

    for (let cityName = 0; cityName < array.length; cityName++) {
      let url = `http://api.worldweatheronline.com/premium/v1/tz.ashx?q=${array[cityName]}&key=af584370a5724491ad643957190505&format=json`;

      timeDataPromises.push(makeHttpRequest(url))
    }

    Promise.all(timeDataPromises)
      .then(cityData => {
        for (let city = 0; city < cityData.length; city++) {
          cityData[city] = JSON.parse(cityData[city])
        }
        resolve(cityData)
      })
  })
}

const promises = [getWeatherData(array), getTimeData(array)]

Promise.all(promises)
  .then(data => {
    for (let currentCity = 0; currentCity < array.length; currentCity++) {
      const weatherData = data[0]
      const timeData = data[1]

      console.log(array[currentCity])
      if (!(currentCity in weatherData) || !('main' in weatherData[currentCity])) {
        console.log("No data available on this city")
        console.log()
        continue
      }

      if (!(currentCity in timeData) || !('time_zone' in timeData[currentCity].data)) {
        console.log("no data available")
        console.log()
        continue
      }
      
      const weatherKelvin = weatherData[currentCity].main.temp
      const kelvinToFahrenheit = (weatherKelvin - 273.15) * 9 / 5 + 32
      const weatherWithNoDecimal = Math.trunc(kelvinToFahrenheit)
      console.log('weather(F): ', JSON.stringify(weatherWithNoDecimal))

      const localtime = timeData[currentCity].data.time_zone[0].localtime
      console.log('Date / time:', JSON.stringify(localtime))
      console.log()

    }
  })

